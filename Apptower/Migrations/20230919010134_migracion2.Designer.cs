// <auto-generated />
using System;
using Apptower.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Apptower.Migrations
{
    [DbContext(typeof(ApptowerProvicionalContext))]
    [Migration("20230919010134_migracion2")]
    partial class migracion2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Apptower.Models.Espacio", b =>
                {
                    b.Property<int>("IdEspacio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspacio"));

                    b.Property<double?>("Area")
                        .HasColumnType("float");

                    b.Property<int?>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoEspacio")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('ACTIVO')");

                    b.Property<string>("NombreEspacio")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoEspacio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdEspacio")
                        .HasName("PKIdEspacios");

                    b.HasIndex(new[] { "NombreEspacio" }, "UQ__Espacios__585163C0618565D3")
                        .IsUnique()
                        .HasFilter("[NombreEspacio] IS NOT NULL");

                    b.ToTable("Espacios");
                });

            modelBuilder.Entity("Apptower.Models.Parqueadero", b =>
                {
                    b.Property<int>("IdParqueadero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParqueadero"));

                    b.Property<string>("EstadoParqueadero")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('ACTIVO')");

                    b.Property<int?>("IdEspacio")
                        .HasColumnType("int");

                    b.Property<string>("NombreParqueadero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TipoParqueadero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdParqueadero")
                        .HasName("PKParqueaderos");

                    b.HasIndex("IdEspacio");

                    b.HasIndex(new[] { "NombreParqueadero" }, "UNNombreParqueadro")
                        .IsUnique();

                    b.ToTable("Parqueaderos");
                });

            modelBuilder.Entity("Apptower.Models.Propietario", b =>
                {
                    b.Property<int>("IdPropietario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPropietario"));

                    b.Property<string>("ApellidoPropietario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CorreoPropietario")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("EstadoPropietario")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('ACTIVO')");

                    b.Property<DateTime>("FechaNacimientoPropietario")
                        .HasColumnType("datetime");

                    b.Property<string>("NombrePropietario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroDocumentoPropietario")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TelefonoPropietario")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TipoDocumentoPropietario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdPropietario")
                        .HasName("PKIdPropietario");

                    b.ToTable("Propietarios");
                });

            modelBuilder.Entity("Apptower.Models.PropietariosPorEspacio", b =>
                {
                    b.Property<int>("IdPropietariosPorEspacio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPropietariosPorEspacio"));

                    b.Property<int?>("IdEspacio")
                        .HasColumnType("int");

                    b.Property<int?>("IdPropietario")
                        .HasColumnType("int");

                    b.HasKey("IdPropietariosPorEspacio")
                        .HasName("PKPropietariosPorEspacio");

                    b.HasIndex("IdEspacio");

                    b.HasIndex("IdPropietario");

                    b.ToTable("PropietariosPorEspacio", (string)null);
                });

            modelBuilder.Entity("Apptower.Models.Reserva", b =>
                {
                    b.Property<int>("IdReserva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReserva"));

                    b.Property<int>("CantidadPersonas")
                        .HasColumnType("int");

                    b.Property<string>("EspacioReserva")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("FechaReserva")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("TipoReserva")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("IdReserva")
                        .HasName("PKReserva");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("Apptower.Models.ReservasEspacio", b =>
                {
                    b.Property<int>("IdReservaEspacios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservaEspacios"));

                    b.Property<int?>("IdEspacio")
                        .HasColumnType("int");

                    b.Property<int?>("IdReserva")
                        .HasColumnType("int");

                    b.HasKey("IdReservaEspacios")
                        .HasName("PKReservaEspacios");

                    b.HasIndex("IdEspacio");

                    b.HasIndex("IdReserva");

                    b.ToTable("ReservasEspacios");
                });

            modelBuilder.Entity("Apptower.Models.ReservasParqueadero", b =>
                {
                    b.Property<int>("IdReservaEspacios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservaEspacios"));

                    b.Property<int?>("IdParqueadero")
                        .HasColumnType("int");

                    b.Property<int?>("IdReserva")
                        .HasColumnType("int");

                    b.Property<int?>("IdVehiculo")
                        .HasColumnType("int");

                    b.HasKey("IdReservaEspacios")
                        .HasName("PKReservaParqueadero");

                    b.HasIndex("IdParqueadero");

                    b.HasIndex("IdReserva");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("ReservasParqueadero", (string)null);
                });

            modelBuilder.Entity("Apptower.Models.Residente", b =>
                {
                    b.Property<int>("IdResidente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdResidente"));

                    b.Property<string>("ApellidoResidente")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CorreoResidente")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("EstadoResidente")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('ACTIVO')");

                    b.Property<DateTime?>("FechaFinResidencia")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicioResidencia")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaNacimientoResidente")
                        .HasColumnType("datetime");

                    b.Property<int>("IdEspacio")
                        .HasColumnType("int");

                    b.Property<string>("NombreResidente")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroDocumentoResidente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("ResidenciaActual")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TelefonoResidente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TipoDocumentoResidente")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TipoResidente")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('PROPIETARIO')");

                    b.HasKey("IdResidente")
                        .HasName("PKIdResidente");

                    b.HasIndex("IdEspacio");

                    b.ToTable("Residentes");
                });

            modelBuilder.Entity("Apptower.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Apellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Contrasena")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Correo")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Documento")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("('ACTIVO')");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TipoDocumento")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdUsuario")
                        .HasName("PkIdUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Apptower.Models.Vehiculo", b =>
                {
                    b.Property<int>("IdVehiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVehiculo"));

                    b.Property<int>("NombrePropietarioVehiculo")
                        .HasColumnType("int");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("TipoUsuarioVehiculo")
                        .HasColumnType("int");

                    b.HasKey("IdVehiculo")
                        .HasName("PKVehiculos");

                    b.HasIndex(new[] { "Placa" }, "UCPlaca")
                        .IsUnique();

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("Apptower.Models.VehiculosPorEspacio", b =>
                {
                    b.Property<int>("IdVehiculosPorEspacio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVehiculosPorEspacio"));

                    b.Property<int?>("IdEspacio")
                        .HasColumnType("int");

                    b.Property<int?>("IdVehiculo")
                        .HasColumnType("int");

                    b.HasKey("IdVehiculosPorEspacio")
                        .HasName("PKIdVehiculosPorEspacio");

                    b.HasIndex("IdEspacio");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("VehiculosPorEspacio", (string)null);
                });

            modelBuilder.Entity("Apptower.Models.Visitante", b =>
                {
                    b.Property<int>("IdVisitante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVisitante"));

                    b.Property<string>("ApellidoVisitante")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GeneroVisitante")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('OTRO')");

                    b.Property<string>("NombreVisitante")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumeroDocumentoVisitante")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PermisoVisitante")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('ACTIVO')");

                    b.Property<string>("TipoDocumentoVisitante")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdVisitante")
                        .HasName("PKIdVisitante");

                    b.ToTable("Visitantes");
                });

            modelBuilder.Entity("Apptower.Models.VisitantesPorEspacio", b =>
                {
                    b.Property<int>("IdVisitantePorEspacio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVisitantePorEspacio"));

                    b.Property<int?>("IdEspacio")
                        .HasColumnType("int");

                    b.Property<int?>("IdVisitante")
                        .HasColumnType("int");

                    b.HasKey("IdVisitantePorEspacio")
                        .HasName("PKIdVisitantePorEspacio");

                    b.HasIndex("IdEspacio");

                    b.HasIndex("IdVisitante");

                    b.ToTable("VisitantesPorEspacio", (string)null);
                });

            modelBuilder.Entity("Apptower.Models.Parqueadero", b =>
                {
                    b.HasOne("Apptower.Models.Espacio", "IdEspacioNavigation")
                        .WithMany("Parqueaderos")
                        .HasForeignKey("IdEspacio")
                        .HasConstraintName("FKEspacios");

                    b.Navigation("IdEspacioNavigation");
                });

            modelBuilder.Entity("Apptower.Models.PropietariosPorEspacio", b =>
                {
                    b.HasOne("Apptower.Models.Espacio", "IdEspacioNavigation")
                        .WithMany("PropietariosPorEspacios")
                        .HasForeignKey("IdEspacio")
                        .HasConstraintName("FKEspacios3");

                    b.HasOne("Apptower.Models.Propietario", "IdPropietarioNavigation")
                        .WithMany("PropietariosPorEspacios")
                        .HasForeignKey("IdPropietario")
                        .HasConstraintName("FKPropietarios3");

                    b.Navigation("IdEspacioNavigation");

                    b.Navigation("IdPropietarioNavigation");
                });

            modelBuilder.Entity("Apptower.Models.Reserva", b =>
                {
                    b.HasOne("Apptower.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Reservas")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FKUsuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Apptower.Models.ReservasEspacio", b =>
                {
                    b.HasOne("Apptower.Models.Espacio", "IdEspacioNavigation")
                        .WithMany("ReservasEspacios")
                        .HasForeignKey("IdEspacio")
                        .HasConstraintName("FKEspacio1");

                    b.HasOne("Apptower.Models.Reserva", "IdReservaNavigation")
                        .WithMany("ReservasEspacios")
                        .HasForeignKey("IdReserva")
                        .HasConstraintName("FKReserva1");

                    b.Navigation("IdEspacioNavigation");

                    b.Navigation("IdReservaNavigation");
                });

            modelBuilder.Entity("Apptower.Models.ReservasParqueadero", b =>
                {
                    b.HasOne("Apptower.Models.Parqueadero", "IdParqueaderoNavigation")
                        .WithMany("ReservasParqueaderos")
                        .HasForeignKey("IdParqueadero")
                        .HasConstraintName("FKParqueadero2");

                    b.HasOne("Apptower.Models.Reserva", "IdReservaNavigation")
                        .WithMany("ReservasParqueaderos")
                        .HasForeignKey("IdReserva")
                        .HasConstraintName("FKReserva2");

                    b.HasOne("Apptower.Models.Vehiculo", "IdVehiculoNavigation")
                        .WithMany("ReservasParqueaderos")
                        .HasForeignKey("IdVehiculo")
                        .HasConstraintName("FKVehiculo");

                    b.Navigation("IdParqueaderoNavigation");

                    b.Navigation("IdReservaNavigation");

                    b.Navigation("IdVehiculoNavigation");
                });

            modelBuilder.Entity("Apptower.Models.Residente", b =>
                {
                    b.HasOne("Apptower.Models.Espacio", "IdEspacioNavigation")
                        .WithMany("Residentes")
                        .HasForeignKey("IdEspacio")
                        .IsRequired()
                        .HasConstraintName("FKEspacio");

                    b.Navigation("IdEspacioNavigation");
                });

            modelBuilder.Entity("Apptower.Models.VehiculosPorEspacio", b =>
                {
                    b.HasOne("Apptower.Models.Espacio", "IdEspacioNavigation")
                        .WithMany("VehiculosPorEspacios")
                        .HasForeignKey("IdEspacio")
                        .HasConstraintName("FKEspacios2");

                    b.HasOne("Apptower.Models.Vehiculo", "IdVehiculoNavigation")
                        .WithMany("VehiculosPorEspacios")
                        .HasForeignKey("IdVehiculo")
                        .HasConstraintName("FKVehiculo2");

                    b.Navigation("IdEspacioNavigation");

                    b.Navigation("IdVehiculoNavigation");
                });

            modelBuilder.Entity("Apptower.Models.VisitantesPorEspacio", b =>
                {
                    b.HasOne("Apptower.Models.Espacio", "IdEspacioNavigation")
                        .WithMany("VisitantesPorEspacios")
                        .HasForeignKey("IdEspacio")
                        .HasConstraintName("FKEspacios1");

                    b.HasOne("Apptower.Models.Visitante", "IdVisitanteNavigation")
                        .WithMany("VisitantesPorEspacios")
                        .HasForeignKey("IdVisitante")
                        .HasConstraintName("FKVisitante1");

                    b.Navigation("IdEspacioNavigation");

                    b.Navigation("IdVisitanteNavigation");
                });

            modelBuilder.Entity("Apptower.Models.Espacio", b =>
                {
                    b.Navigation("Parqueaderos");

                    b.Navigation("PropietariosPorEspacios");

                    b.Navigation("ReservasEspacios");

                    b.Navigation("Residentes");

                    b.Navigation("VehiculosPorEspacios");

                    b.Navigation("VisitantesPorEspacios");
                });

            modelBuilder.Entity("Apptower.Models.Parqueadero", b =>
                {
                    b.Navigation("ReservasParqueaderos");
                });

            modelBuilder.Entity("Apptower.Models.Propietario", b =>
                {
                    b.Navigation("PropietariosPorEspacios");
                });

            modelBuilder.Entity("Apptower.Models.Reserva", b =>
                {
                    b.Navigation("ReservasEspacios");

                    b.Navigation("ReservasParqueaderos");
                });

            modelBuilder.Entity("Apptower.Models.Usuario", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Apptower.Models.Vehiculo", b =>
                {
                    b.Navigation("ReservasParqueaderos");

                    b.Navigation("VehiculosPorEspacios");
                });

            modelBuilder.Entity("Apptower.Models.Visitante", b =>
                {
                    b.Navigation("VisitantesPorEspacios");
                });
#pragma warning restore 612, 618
        }
    }
}
